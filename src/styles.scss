@use '@angular/material' as mat;

@include mat.core();
@include mat.strong-focus-indicators();

$my-primary: mat.define-palette(mat.$indigo-palette, 500);
$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

$my-theme: mat.define-light-theme((
 color: (
   primary: $my-primary,
   accent: $my-accent,
 )
));

@include mat.all-component-themes($my-theme);
@include mat.strong-focus-indicators-theme($my-theme);

// // Custom Theming for Angular Material
// // For more information: https://material.angular.io/guide/theming
// @use '~@angular/material' as mat;
// // Plus imports for other components in your app.
// // Include the common styles for Angular Material. We include this here so that you only
// // have to load a single css file for Angular Material in your app.
// // Be sure that you only ever include this mixin once!
// @include mat.core();
// // Define the palettes for your theme using the Material Design palettes available in palette.scss
// // (imported above). For each palette, you can optionally specify a default, lighter, and darker
// // hue. Available color palettes: https://material.io/design/color/
// $org-primary: mat.define-palette(mat.$indigo-palette,500);
// $org-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);
// // The warn palette is optional (defaults to red).
// $org-warn: mat.define-palette(mat.$red-palette,500);
// // Create the theme object. A theme consists of configurations for individual
// // theming systems such as "color" or "typography".
// $org-theme: mat.define-light-theme((color: (primary: $org-primary, accent: $org-accent, warn: $org-warn, )));
// // Include theme styles for core and each component used in your app.
// // Alternatively, you can import and @include the theme mixins for each component
// // that you are using.
// @include mat.all-component-themes($org-theme);


// // Emit theme-dependent styles for common features used across multiple components.
// @include mat.core-theme($my-theme);

// // Emit styles for MatButton based on `$my-theme`. Because the configuration
// // passed to `define-light-theme` omits typography, `button-theme` will not
// // emit any typography styles.
// @include mat.button-theme($my-theme);


@import "./assets/theme/override-styles";
@import "./assets/theme/utilities-styles";
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100&display=swap');
@import 'animate.css';
// ARABIC FONT
@font-face {
  font-family: Cairo-Bold;
  src: url(assets/fonts/Cairo-Bold.ttf) format("opentype");
}

@font-face {
  font-family: Cairo-Regular;
  src: url(assets/fonts/Cairo-Regular.ttf) format("opentype");
}

@font-face {
  font-family: Cairo-Light;
  src: url(assets/fonts/Cairo-Light.ttf) format("opentype");
}



@import "./assets/theme/override-styles";
@import "./assets/theme/utilities-styles";
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100&display=swap');
@import 'animate.css';
// ARABIC FONT
@font-face {
  font-family: Cairo-Bold;
  src: url(assets/fonts/Cairo-Bold.ttf) format("opentype");
}

@font-face {
  font-family: Cairo-Regular;
  src: url(assets/fonts/Cairo-Regular.ttf) format("opentype");
}

@font-face {
  font-family: Cairo-Light;
  src: url(assets/fonts/Cairo-Light.ttf) format("opentype");
}
